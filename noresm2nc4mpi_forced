#!/bin/bash 

### CUSTOMIZE BEGIN ###
ACCOUNT=${ACCOUNT:-nn2345k}
WALLTIME=${WALLTIME:-48:00:00} 
NTHREADS=${NTHREADS:-32}
ZIPRES=${ZIPRES:-1}                  # 1=zip restart files
RMLOGS=${RMLOGS:-1}                  # 1=remove log files 
COMPLEVEL=${COMPLEVEL:-5}
NCCOPY=${NCCOPY:-/opt/cray/netcdf/4.1.3/gnu/46/bin/nccopy}
NCDUMP=${NCDUMP:-/opt/cray/netcdf/4.1.3/gnu/46/bin/ncdump}
GZIP=${GZIP:-`which gzip`} 
TEMPDIR=${TEMPDIR:-/work/$USER/`basename $0 .sh`}
CASEDIR=$1
### CUSTOMIZE END ###

# check input argument and print help blurb if check fails
if [[ ! $1 || $1 == "-h" || $1 == "--help" ]] ; then
cat <<EOF
Usage: `basename $0` <absolute path to case in archive directory> 

Example: export ACCOUNT=nn9039k 
         export WALLTIME=24:00:00 
         `basename $0` /work/${USER}/archive/my-noresm-case 
  
Purpose: Converts NorESM output to compressed netcdf 4 format and gzips restarts   

Description: `basename $0` is fully mpi parallized and submits a pbs job 
             to the queue to do the compression on the backend. 

             IMPORTANT: Only run one instance of `basename $0` on a single case
             at a time. Yet, it is safe to run multiple instances of `basename $0` 
             on multiple NorESM cases at a time. In case that a `basename $0` job 
             terminates before completion then simply run `basename $0` again 
             (the tool with continue where it stopped).  

             Influencial environmental variables (default values): 
               ACCOUNT   (${ACCOUNT})
               WALLTIME  (${WALLTIME}) 
               NTHREADS  (${NTHREADS})                             # number of cpus used
               ZIPRES    (${ZIPRES})                              # 1=gzip restart files 
               RMLOGS    (${RMLOGS})                              # 1=remove log files
               COMPLEVEL (${COMPLEVEL})                              # compression level 
               NCCOPY    (${NCCOPY})
               NCDUMP    (${NCDUMP})  
               GZIP      (${GZIP}) 
               TEMPDIR   (${TEMPDIR}) 

Change history: 2014.04.29 first version of `basename $0`
EOF
  exit 1
fi

# check that input folder exists
if [ ! -d $CASEDIR ] ; then 
  echo $CASEDIR not a directory! aborting... 
  exit 1 
elif [ ! `echo $CASEDIR | head -1c` == '/' ]
then
  echo "Please specify absolute input path and try again." 
  exit 1
fi 
GID=`stat --format=%G $CASEDIR`

# create temporary directory (if not existing) and cd 
mkdir -p $TEMPDIR
cd $TEMPDIR

# create convert exe 
if [ ! -e convert ] ; then 
echo compile nccopy launcher
cat <<EOF> convert.c
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <mpi.h>
int main(int argc, char *argv[])
{
        int rank, result, i; char s[1024]; 
        MPI_Init(&argc, &argv);
        MPI_Comm_rank(MPI_COMM_WORLD, &rank);
        strcpy(s,"${TEMPDIR}/nccopy -k 4 -s -d ${COMPLEVEL} ");      
        for ( i = 0; i < argc-1; i++ ) {
          if (rank == i) {
            strcat(s,argv[i+1]);
            strcat(s," ");
            strcat(s,argv[i+1]);
            strcat(s,"_tmp ; mv ");
            strcat(s,argv[i+1]);
            strcat(s,"_tmp ");
            strcat(s,argv[i+1]); 
            printf("cpu=%3d: %s \n", rank+1, s);
            result = system(s);  
          }
        }
        MPI_Finalize();
}
EOF
cc -o convert convert.c
rm convert.c
fi

# create zip exe 
if [ ! -e zip ] ; then
echo compile gzip launcher
cat <<EOF> zip.c
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <mpi.h>
int main(int argc, char *argv[])
{
        int rank, result, i; char s[1024]; 
        MPI_Init(&argc, &argv);
        MPI_Comm_rank(MPI_COMM_WORLD, &rank);
        strcpy(s,"${TEMPDIR}/gzip ");      
        for ( i = 0; i < argc-1; i++ ) {
          if (rank == i) {
            strcat(s,argv[i+1]);
            printf("cpu=%3d: %s \n", rank+1, s);
            result = system(s);  
          }
        }
        MPI_Finalize();
}
EOF
cc -o zip zip.c
rm zip.c
fi

# copy other executables 
if [ ! -e nccopy ] ; then 
  cp $NCCOPY nccopy 
fi 
if [ ! -e ncdump ] ; then 
  cp $NCDUMP ncdump  
fi 
if [ ! -e gzip ] ; then 
  cp $GZIP gzip 
fi 

# create PBS script and submit  
LID="`date +%y%m%d-%H%M%S`"
cat <<EOF> `basename $0 .sh`_${LID}.pbs
#! /bin/sh 
#PBS -A ${ACCOUNT}
#PBS -l mppwidth=${NTHREADS}
#PBS -l walltime=${WALLTIME}
#PBS -S /bin/sh
#PBS -N `basename $0 .sh`
#PBS -o ${TEMPDIR}/`basename $0 .sh`_${LID}.out
#PBS -e ${TEMPDIR}/`basename $0 .sh`_${LID}.err

cd ${CASEDIR} 

# do history files 
ARGS=' ' 
for ncfile in \`find . -wholename '*/hist/*.nc' -print\`; do
  if [ \`${NCDUMP} -k \${ncfile} | grep 'netCDF-4' | wc -l\` -eq 0 ] ; then
    ARGS=\${ARGS}' '\${ncfile} 
    if [ \`echo \${ARGS} | wc -w\` -eq ${NTHREADS} ] ; then 
      aprun -n ${NTHREADS} ${TEMPDIR}/convert \${ARGS}
      chmod go+r \${ARGS} 
      chgrp $GID \${ARGS}
      ARGS=' '
    fi 
  fi 
done 
if [ \`echo \${ARGS} | wc -w\` -gt 0 ] ; then 
  aprun -n ${NTHREADS} ${TEMPDIR}/convert \${ARGS}
  chmod go+r \${ARGS}
  chgrp $GID \${ARGS}
fi

# do restart files 
if [ ${ZIPRES} -eq 1 ] ; then 
  ARGS=' '
  for ncfile in \`find . -wholename '*/rest/*.nc' -print\`; do
    ARGS=\${ARGS}' '\${ncfile} 
    if [ \`echo \${ARGS} | wc -w\` -eq ${NTHREADS} ] ; then 
      aprun -n ${NTHREADS} ${TEMPDIR}/zip \${ARGS}
      chmod go+r \`echo \${ARGS} | sed 's/.nc/.nc.gz/g'\`
      chgrp $GID \`echo \${ARGS} | sed 's/.nc/.nc.gz/g'\`
      ARGS=' '
    fi 
  done 
  if [ \`echo \${ARGS} | wc -w\` -gt 0 ] ; then 
    aprun -n ${NTHREADS} ${TEMPDIR}/zip \${ARGS}
    chmod go+r \`echo \${ARGS} | sed 's/.nc/.nc.gz/g'\`
    chgrp $GID \`echo \${ARGS} | sed 's/.nc/.nc.gz/g'\`
  fi
fi 
for gzfile in \`find . -wholename '*/rest/*.gz' -print\`; do
  file \${gzfile} > /dev/null
done

# do log files 
if [ ${RMLOGS} -eq 1 ] ; then
  for logfile in \`find . -wholename '*/logs/*' -print\`; do
     rm -f \${logfile}
  done
fi

echo conversion COMPLETED 
EOF

# submit job
echo submit ${TEMPDIR}/`basename $0 .sh`_${LID}.pbs to queue 
qsub `basename $0 .sh`_${LID}.pbs
echo log out: ${TEMPDIR}/`basename $0 .sh`_${LID}.out 
echo log err: ${TEMPDIR}/`basename $0 .sh`_${LID}.err 
